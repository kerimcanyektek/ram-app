// Next
import Head from 'next/head'

// React
import { useEffect, useState } from 'react'

// Libs
import axios from 'axios'
import { toast } from 'react-toastify'
import { useForm } from 'react-hook-form'
import { IoSearch, IoCloseSharp } from 'react-icons/io5'
import { SubmitHandler } from 'react-hook-form/dist/types'

// Components
import { CharCard } from '../components/CharCard'

// Types
import { ApiData, Character } from '../@types/Api'

// Styles
import { FilterForm, FilteredContainer, FilterSpan, ClearButton, CharContainer, PaginationContainer, BackButton, PageCount, NextButton } from '../styles/home'


interface Props {
  res: ApiData
}

interface CurrentInfo {
  count: number
  pages: number
  next: string | null
  prev: string | null
  current: string
}

interface Inputs {
  query: string
}

export const API_URL = 'https://rickandmortyapi.com/api/character'

export default function Home(props: Props) {
  const { info, results = [] } = props.res

  // Hooks
  const {
    register,
    reset,
    handleSubmit,
    formState: { errors },
  } = useForm<Inputs>()

  const [filteredBy, setFilteredBy] = useState<string>('')
  const [characters, setCharacters] = useState<Character[]>(results)
  const [currentInfo, setCurrentInfo] = useState<CurrentInfo>({
    ...info,
    current: API_URL,
  })

  // Constants
  const { current } = currentInfo
  const disablePrevButton = currentInfo.prev === null
  const disableNextButton = currentInfo.next === null
  const currentPageNumber = current.includes('page=')
    ? Number(new URL(current).searchParams.get('page'))
    : 1

  // Functions
  const handleNextPage = () => {
    setCurrentInfo((prevInfo: CurrentInfo) => {
      return { ...prevInfo, current: prevInfo.next ? prevInfo.next : current }
    })
  }

  const handlePrevPage = () => {
    setCurrentInfo((prevInfo: CurrentInfo) => {
      return { ...prevInfo, current: prevInfo.prev ? prevInfo.prev : current }
    })
  }

  const handleClearFilter = () => {
    const resetPage = `${API_URL}/?page=1`

    setFilteredBy('')
    setCurrentInfo((prevInfo: CurrentInfo) => {
      return { ...prevInfo, current: resetPage }
    })
  }

  const onSubmit: SubmitHandler<Inputs> = (data) => {
    const filteredQuery = `${API_URL}/?page=1&name=${data.query}`
    reset()
    setFilteredBy(data.query)
    setCurrentInfo({ ...currentInfo, current: filteredQuery })
  }

  useEffect(() => {
    if (current === API_URL) return

    async function changePage() {
      const changePage = await axios
        .get<ApiData>(current)
        .then(({ data }) => {
          return data
        })
        .catch(() => {
          toast.error('Hata!')
        })

      if (changePage) {
        setCurrentInfo({
          ...changePage.info,
          current,
        })

        setCharacters([...changePage.results])
      }
    }

    changePage()
  }, [current])

  return (
    <>
      <Head>
        <title>Rick and Morty</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <FilterForm onSubmit={handleSubmit(onSubmit)}>
          <div>
            <input
              type="text"
              {...register('query', { required: true })}
              placeholder="Ara.."
            />
            {errors.query && <span>Arama kutusunu doldurunuz.</span>}
          </div>
          <button type="submit">
            <IoSearch />
          </button>
        </FilterForm>

        {!!filteredBy.length && (
          <FilteredContainer>
            <span>
              Aranan:{' '}
              <FilterSpan>
                {filteredBy}{' '}
                <ClearButton type="button" onClick={handleClearFilter}>
                  <IoCloseSharp />
                </ClearButton>
              </FilterSpan>
            </span>
          </FilteredContainer>
        )}

        <CharContainer>
          {characters.map((character) => (
            <CharCard key={character.id} character={character} />
          ))}
        </CharContainer>

        <PaginationContainer>
          <BackButton onClick={handlePrevPage} disabled={disablePrevButton}>
            Geri
          </BackButton>
          <PageCount
            type="text"
            disabled
            value={`${currentPageNumber} / ${currentInfo.pages}`}
          />
          <NextButton onClick={handleNextPage} disabled={disableNextButton}>
            Ä°leri
          </NextButton>
        </PaginationContainer>
      </main>
    </>
  )
}

export async function getStaticProps() {
  const res = await axios.get<ApiData>(API_URL).then(({ data }) => {
    return data
  })

  return {
    props: {
      res,
    },
    revalidate: 60 * 60 * 2, // 2 hours,
  }
}